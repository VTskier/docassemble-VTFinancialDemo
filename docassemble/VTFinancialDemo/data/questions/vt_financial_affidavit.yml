comment: |
  K made some simple initial screens so user is asked if they have a job, if they have ft, pt or seasonal jobs, and to collect their calendar month income if they are seasonal ---- very rough drafts to get the discussion going!
  
  We need to work on other deductions
  
---
include:
  - docassemble.ALToolbox:al_income.yml
  - docassemble.AssemblyLine:al_package.yml
---
objects:
  - jobs: ALItemizedJobList.using(complete_attribute='complete', ask_number=True)
  - other_incomes: ALIncomeList
---
objects:
  - jobs[i].employer_paid_expenses: ALIncomeList
  # other_deductions or deductions? I think `other` is necessary to keep the original deductions separate because this still won't have categories.
  - jobs[i].other_deductions: ALExpenseList
---
id: interview order
mandatory: True
code: |
  employed
  if employed:
    self_employed_or_not
    if self_employed_or_not["is_not_self_employed"]:
      employer1_name_first
      job_period
      if job_period["is_seasonal"]:
        seasonal_month_1
        #For seasonal workers, how do we collect the employer name, tips, employer-paid expenses, etc?

    jobs.gather()
    #need to add x.which_tips_commissions
    review_jobs
  else:
    why_unemployed
    
  if other_incomes.selected_types.any_true():
    other_incomes.there_are_any = True
    other_incomes.gathered

  house_expenses_table.totals.gather()
  generic_expense_summary
  
  improved_final_screen
  
---
id: job review
question: |
  Are you employed?
fields:
  - Are you employed?: employed
    datatype: yesnoradio
---
id: why unemployed
question: |
  Tell us more
fields:
  - I am currently unemployed because:: why_unemployed
    maxlength: 30
---
id: start to gather employers
generic object: ALItemizedJob
question: |
  Who have you worked for during the last 12 months? Let's make a list of your employers.
fields:
    - no label: self_employed_or_not
      datatype: checkboxes
      choices:
        - I am self-employed: is_self_employed
        - I am not self-employed: is_not_self_employed
      none of the above: False
      maxlength: 1
---
id: gather basic employer info
generic object: ALItemizedJob
question: |
    Tell us about your first employer
fields:
    - Name of employer: employer1_name_first
    - Address of employer: employer1_address
    - Is there another employer?: another_employer
      datatype: yesnoradio
---
#Redoing this ALIncome module screen to ask about kind of job (ft,pt AND seasonal)

id: itemized job period
generic object: ALItemizedJob
question: |
    What kind of job do you have with ${ employer1_name_first }?
fields:
    - Type of job: job_period
      datatype: checkboxes
      choices:
        - Full-time job(s): is_full_time
        - Part-time job(s): is_part_time
        - Seasonal job(s): is_seasonal
      none of the above: False
      maxlength: 1
--- 
#I changed the variable names in the question block above so I need to reset them here so the rest of the interview will run.
code: |
  if self_employed_or_not["is_self_employed"]:
    x.is_self_employed = self_employed_or_not["is_self_employed"]
  if job_period["is_full_time"]:
    x.is_full_time = job_period["is_full_time"]
  if job_period["is_part_time"]:
    x.is_full_time = job_period["is_part_time"]  
---
id: itemized job period seasonal
generic object: ALItemizedJob
question: |
  As a seasonal worker, how much did you make each of the last 12 months?
#Figure out how to show the past 12 months from the current date?
fields:
  - January: seasonal_month_1
    datatype: currency
    required: False
  - February: seasonal_month_2
    datatype: currency
    required: False
  - March: seasonal_month_3
    datatype: currency
    required: False
  - April: seasonal_month_4
    datatype: currency
    required: False
  - May: seasonal_month_5
    datatype: currency
    required: False
  - June: seasonal_month_6
    datatype: currency
    required: False
  - July: seasonal_month_7
    datatype: currency
    required: False
  - August: seasonal_month_8
    datatype: currency
    required: False
  - September: seasonal_month_9
    datatype: currency
    required: False
  - October: seasonal_month_10
    datatype: currency
    required: False
  - November: seasonal_month_11
    datatype: currency
    required: False
  - December: seasonal_month_12
    datatype: currency
    required: False
  - How much was taken out of your pay each month for things like federal taxes, child support, health insurance?: seasonal_monthly_deductions
    datatype: currency
    required: False
  
  
  
  
  
#I didn't touch the code we had below except to change the id name below to id: itemized job period pt ft, and move up and edit id: why unemployed
#####################################################################################  
---  
id: itemized job period pt ft
generic object: ALItemizedJob
question: |
  How do you get paid?
fields:
  - Hourly or salary?: x.is_hourly
    input type: radio
    choices:
      - Hourly: True
      - Salary: False
  - How often does ${ x.employer} pay?: x.times_per_year
    input type: radio
    code: |
      times_per_year_list
    datatype: integer
  - How many hours are worked during that time?: x.hours_per_period
    input type: number
    show if: x.is_hourly
---
generic object: ALItemizedJob
code: |
  x.source
  x.is_self_employed
  # NOTE: if `is_self_employed`, you need to set this yourself
  x.employer.name.first
  x.times_per_year
  x.to_add.complete_attribute = 'complete'
  x.to_subtract.complete_attribute = 'complete'
  if x.is_part_time:
    x.to_add["part time"].is_hourly = x.is_hourly
  else:
    x.to_add["full time"].is_hourly = x.is_hourly
  x.to_add.gather()
  x.to_subtract.gather()
  x.employer_paid_expenses.gather()
  x.complete = True
---
id: does employer pay expenses
question: Employer paid expenses for for your ${ jobs[i].source } job
fields:
  - Does your employer pay for any expenses?: jobs[i].employer_paid_expenses.there_are_any
    datatype: yesnoradio
---
id: expense information
question: |
  How much does your employer pay for your expenses for your ${ jobs[i].source }?
fields: 
  - Type of expense: jobs[i].employer_paid_expenses[j].source
    code: |
      expense_terms_ordered
  - Other (explain): jobs[i].employer_paid_expenses[j].source
    show if:
      variable: jobs[i].employer_paid_expenses[j].source
      is: other
  - Amount: jobs[i].employer_paid_expenses[j].value
    datatype: currency
  - How often do you pay this amount?: jobs[i].employer_paid_expenses[j].times_per_year
    default: 12
    code: |
      times_per_year_for_expenses
---
id: are there more employer pay expenses
question: Does your employer pay for other expenses for ${ jobs[i].source }?
subquestion: |
  % if jobs[i].employer_paid_expenses.number_gathered() > 0:
  You've already told us about **${ comma_and_list( [an_expense.source for an_expense in jobs[i].employer_paid_expenses.complete_elements()] ) }**.
  % endif
fields:
  - Does your employer pay for any other expenses for this job?: jobs[i].employer_paid_expenses.there_is_another
    datatype: yesnoradio
---
id: Are there other incomes
question: |
  Do you have other incomes?
fields:
  - Do you have any of these incomes?: which_other_incomes
    datatype: checkboxes
    choices:
      - Annuities: annuities
      - Retirement: retirement
---
id: LSV income info for list
generic object: ALIncomeList
question: |
  Tell us about your income from ${ x[i].source }
subquestion: |
  % if i > 1:
  You have already told us about your incomes from ${ comma_and_list([income.source for income in x.complete_elements()]) }.
  % elif i > 0:
  You have already told us about your income from ${ comma_and_list([income.source for income in x.complete_elements()]) }.
  % endif
fields:
  - Times per year you receive this income: x[i].times_per_year
    input type: radio
    code: |
      times_per_year_list
  - Amount of income: x[i].value
    datatype: currency
---
#Brainstorm gathering code for generic tip_commissions - how much and how often   
---
id: Tips and commissions
generic object: ALItemizedJob
question: |
    Tell us about these
fields:
    - Which of these do you have: x.which_tips_commissions
      datatype: checkboxes
      choices:
        - Tips: tips
        - Commissions: commissions
        - Bonuses: bonuses
        - Royalties: royalties
    - How much do you get in tips, commissions, bonuses, royalties? (Q2): x.to_add['tips_commissions'].value
      datatype: currency
      required: False
---
# Generic expense gathering
---
objects:
  house_expenses_table: DAObject
  house_expenses_table.totals: ALExpenseList.using(complete_attribute="complete")
  house_expenses_table.paid_by_other: ALExpenseList.using(auto_gather=False,gathered=True)
---
code: |
  house_expenses_table.name = "household"
  # We can make the two below translatable if we do it right
  house_expenses_table.choices = [
    ("rent", "The rent"),
    ("heat", "The heat"),
    ("phone", "The phone")
  ]
  house_expenses_labels_map = {
    "rent": "rent expense",
    "heat": "heat expense",
    "phone": "phone expense",
  }
---
# This complexity avoids making a separate module which may be even harder to maintain
generic object: DAObject
code: |
  x.totals[i].source
  x.paid_by_other[i].source = x.totals[i].source
  # We get foo_expenses_table.paid_by_other values at the same time
  x.paid_by_other[i].source = x.totals[i].source
  x.paid_by_other[i].times_per_year = x.totals[i].times_per_year
  if x.totals[i].portion_is_paid_by_other:
    x.paid_by_other[i].value
  else:
    x.paid_by_other[i].value = '0'
  if len(x.choices) <= len(x.totals.sources()):
    x.totals.there_is_another = False
  x.totals[i].complete = True
---
id: expenses
generic object: DAObject
question: Do you have any ${ x.name } expenses?
fields:
  - Do you have any ${ x.name } expenses?: x.totals.there_are_any
    datatype: yesnoradio
---
# TODO: For choices, somehow exclude items that the person has already selected
id: expense information
generic object: DAObject
# This title should depend on whether they've already given some expenses
question: |
  What is one ${ x.name } expense?
fields: 
  # Change this to a checklist
  - Type of expense: x.totals[i].source
    code: |
      [ choice for choice in x.choices if choice[0] not in x.totals.sources() ]
  - Amount: x.totals[i].value
    datatype: currency
    min: 0
    validation messages:
      min: The amount must be more than ${ currency(0) }
  - How often do you pay this amount?: x.totals[i].times_per_year
    default: 12
    code: |
      times_per_year_for_expenses
  - Does anyone else help pay for this expense? This can include your employer: x.totals[i].portion_is_paid_by_other
    datatype: yesnoradio
---
id: expense paid by other
generic object: DAObject
# For translation, .source would actually be more complicated code
question: How much do other people help pay for ${ x.totals[i].source } ${ times_per_year(times_per_year_list, x.totals[i].times_per_year) }?
fields:
  - Amount: x.paid_by_other[i].value
    datatype: currency
    min: 0
    max: ${ x.totals[i].value }
    validation messages:
      min: The amount must be more than ${ currency(0) }
      max: The amount must be equal to or less than ${ currency( x.totals[i].value )}
---
id: are there more expenses
generic object: DAObject
question: Do you have other ${ x.name } expenses?
subquestion: |
  % if x.totals.number_gathered() > 0:
  List the already gathered items by their object key:
  
  You've already told us about **${ comma_and_list(x.totals.sources()) }**.
  
  Alternatively, if you want something more than the object key, which can also make them translatable if we do it right:
  
  You've already told us about **${ comma_and_list([house_expenses_labels_map[key] for key in x.totals.sources()]) }**.
  % endif
fields:
  - Is there another expense?: x.totals.there_is_another
    datatype: yesnoradio
---
id: expense summary
continue button field: generic_expense_summary
question: |
  Your expenses
subquestion: |
  # Household expenses per month
  
  % if house_expenses_table.totals.there_are_any:
  Total of each household expense:
  
  * Rent: ${ currency(house_expenses_table.totals.total(source=["rent"], times_per_year=12)) }
  * Heat: ${ currency(house_expenses_table.totals.total(source=["heat"], times_per_year=12)) }
  * Phone: ${ currency(house_expenses_table.totals.total(source=["phone"], times_per_year=12)) }
  
  **Total:** ${ currency(house_expenses_table.totals.total(times_per_year=12)) }
  
  Amount of each household expense that someone else pays:
  
  * Rent: ${ house_expenses_table.paid_by_other.total(source=["rent"], times_per_year=12) }
  * Heat: ${ house_expenses_table.paid_by_other.total(source=["heat"], times_per_year=12) }
  * Phone: ${ house_expenses_table.paid_by_other.total(source=["phone"], times_per_year=12) }
  
  **Total others pay:** ${ house_expenses_table.paid_by_other.total(times_per_year=12) }
  
  Amount of each household expense that you pay:
  
  * Rent: ${ house_expenses_table.totals.total(source=["rent"], times_per_year=12) - house_expenses_table.paid_by_other.total(source=["rent"], times_per_year=12) }
  * Heat: ${ house_expenses_table.totals.total(source=["heat"], times_per_year=12) - house_expenses_table.paid_by_other.total(source=["heat"], times_per_year=12) }
  * Phone: ${ house_expenses_table.totals.total(source=["phone"], times_per_year=12) - house_expenses_table.paid_by_other.total(source=["phone"], times_per_year=12) }
  
  **Total you pay:** ${ house_expenses_table.totals.total(times_per_year=12) - house_expenses_table.paid_by_other.total(times_per_year=12) }
  
  % else:
  You have no household expenses.
  % endif
---
id: job review
question: |
  Review your jobs
subquestion: |
  Here is what you've told us about your jobs. You can add more or continue
  to the next question.

  ${ jobs.table }

  ${ jobs.add_action() }
field: review_jobs
---
event: improved_final_screen
question: Summary of your jobs
subquestion: |
  % if not employed:
  I am unemployed: ${employed} because ${ why_unemployed }
  
  % else:
  Employer name and address:
  
    ${ jobs[0].employer_name_address_phone() }
    
  Second employer:
  

  I am self-employed: NA at unknown company
  
  I have included overtime: ${ True }
  
  My monthly gross income excluding self-employed jobs (Q1. Salary or wages): ${ currency(jobs.total(source=["full time","part time"],times_per_year=12)) }

  My employer paid expenses add up to: ${ currency(sum([ expense.total(times_per_year=12) for expense in [ job.employer_paid_expenses for job in jobs ] ])) }
 

  % endif
#  Tips, commissions, bonuses, royalties: ${ currency(jobs.total(source=["tips_commissions"],times_per_year=12)) }
  
#  Self-employment income: Attach Sched C or result from page 11 - gross monthly. Use K's self-empl code
  
---